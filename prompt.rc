# vim: set ts=2 sts=2 sw=2 expandtab
setopt prompt_subst
darkgray="%{[38;5;243m%}"
NJOB='%(1j.(%j) .)'
PS1_END="
%{$red%}%(?..!%?! )$darkgray%(!.#.\$)%{$reset%} "
PS1_HOST='%m:'
RPROMPT_HOST='%m'
if [ -z "$SSH_TTY" ]; then
  PS1_HOST=
  RPROMPT_HOST=
fi

autoload -Uz vcs_info
use_vcs_info=
if vcs_info >/dev/null 2>&1; then
  use_vcs_info=y
fi

if [ "x$use_vcs_info" = "xy" ]; then
  # zsh:
  # %F{2} red
  # %F{2} green
  # %F{3} yellow
  # %F{4} darkblue
  # %F{5} magenta

# zstyle ':vcs_info:*' enable svn git
  zstyle ':vcs_info:*' enable     git
  zstyle ':vcs_info:*' actionformats \
    '%F{5}(%f%s%F{5})%F{2}-%F{5}[%F{2}%b%F{2}|%F{1}%a%F{5}]%f '
  zstyle ':vcs_info:*' formats       \
    '(%s) %b'
  zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{2}%r'
  precmd_hook () {
    if [ -n "$NFS_MOUNTED" ]; then
      case $PWD in
        *$NFS_MOUNTED*)
          vcs_info_msg_0_=' (nfs mounted)'
          ;;
        *)
          vcs_info
          ;;
      esac
    else
      vcs_info
    fi
    gopath_info=
    if [ "$GOPATH" != "$HOME/go" ]; then
      gopath_info=" ${darkgray}GOPATH=$GOPATH%f"
    fi
  }
  #HOST_COLOR_NR=3
  #if [ "$BG" = white ]; then
  #HOST_COLOR_NR=0
  #fi
  #if [ -n "$SSH_TTY" ]; then
  #  HOST_COLOR_NR=2
  #fi
  #HOST_COLOR='%F{$HOST_COLOR_NR}'
  HOST_COLOR=$darkgray

  PS1=$HOST_COLOR'$NJOB$PS1_HOST%~%F{2}${vcs_info_msg_0_}%f${gopath_info}$PS1_END'
  RPROMPT="%F{3}\$RPROMPT_HOST%f"
else
  green="[32m"
  yellow="[33m"
  reset="[0m"
  blue="[00;38;5;33m"

  git_prompt=$HOME/code/git/contrib/completion/git-prompt.sh
  if [ -f $git_prompt ]; then
    source $git_prompt
    GIT_PS1_SHOWDIRTYSTATE=true

    precmd_hook() {
      GIT_STATUS=`__git_ps1 ' (%s)'`
    }
    PS1="%{$blue%}$NJOB\$PS1_HOST%~%{$yellow%}\$GIT_STATUS%{$reset%}\$PS1_END"
  else
    PS1="%{$blue%}$NJOB\$PS1_HOST%~ \$PS1_END"
  fi

  RPROMPT="%{$blue%}\$RPROMPT_HOST%{$reset%}"
fi

case $TERM_NAME in
  any) RPROMPT=;;
  bigterm) RPROMPT=;;
esac

# When a line is killed, put it in the history anyway in case we want to
# return to it
TRAPINT() {
       # Store the current buffer in the history.
       zle &&
       [[ $HISTNO -eq $HISTCMD ]] && # only if we're not back in the history
       print -s -r -- $BUFFER

       # Return the default exit code so zsh aborts the current command.
       return $1
}

mux_title_curr_dir() {
  test -z "$TERM_NAME" && return
  mux_title ${(D)PWD#$HOME/}
}

mux_title() {
  local curr_title
  test -z "$TERM_NAME" && return
  #mux title "'$*'"
  curr_title=`tmux display-message -p '#W'`
  case "$curr_title" in
    "*"*)
      # Do not overwrite title with star prefix
      return
  esac
  tmux rename-window -- "$1";
}

test -n "$SSH_TTY" &&
chpwd() {
  case "$TERM_NAME" in
    "");;
    rtfm) ;;
    #*) screen -X title ${PWD##*/} ;;
    *) mux_title_curr_dir ;;
  esac
  test -n "$SHM_DIR" && echo $PWD > /dev/shm/$$.cwd
}

precmd() {
  precmd_hook
  mux_title_curr_dir
}

preexec() {
  typed_cmd=$1
  case "$TERM_NAME" in
    "");;
    rtfm) mux_title "${typed_cmd#man }" ;;
    *)
      case $typed_cmd in
        *=*)
          for tok in $(echo $typed_cmd)
          do
            #echo >&2 "tok is $tok"
            case "$tok" in
              *=*)
                continue
                ;;
              /*)
                mux_title "$(basename $tok)"
                break
                ;;
              *)
                mux_title "$tok"
                break
                ;;
            esac
          done
          ;;
        fg)
          :
          ;;
        ssh\ *)
          mux_title "${typed_cmd#ssh }"
          ;;
        ssh-direct\ *)
          mux_title "${typed_cmd#ssh-direct }"
          ;;
        *) mux_title "${typed_cmd%% *}" ;;
      esac ;;
  esac
}

mux_title_curr_dir
